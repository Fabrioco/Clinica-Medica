generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(patient)
  code      Int?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  patient Patient?
  doctor  Doctor?

  notifications Notification[]

  @@map("users")
}

model Patient {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  cpf        String   @unique
  birthDate  DateTime
  phone      String
  address    String
  healthPlan String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  appointments Appointment[]
  exams        Exam[]
  payments     Payment[]
}

model Doctor {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id])
  crm             String   @unique
  stripeAccountId String?
  specialty       String
  phone           String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  appointments Appointment[]
  exam         Exam[]
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patientId       Int
  patient         Patient           @relation(fields: [patientId], references: [id])
  doctorId        Int
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  appointmentDate DateTime
  status          AppointmentStatus @default(scheduled)
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  exams   Exam[]
  payment Payment?
}

model Exam {
  id            Int         @id @default(autoincrement())
  appointmentId Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patientId     Int
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      Int
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  name          String
  resultFile    String?
  resultDate    DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            Int           @id @default(autoincrement())
  patientId     Int
  patient       Patient       @relation(fields: [patientId], references: [id])
  appointmentId Int           @unique
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  amount        Float
  paymentMethod PaymentMethod
  status        PaymentStatus @default(pending)
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Integração Stripe
  stripePaymentIntentId String? // ID do pagamento no Stripe
  stripeTransferId      String? // ID da transferência pro médico
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  title     String
  message   String
  read      Boolean  @default(false)
  sendAt    DateTime
  createdAt DateTime @default(now())
}

enum Role {
  admin
  doctor
  receptionist
  patient
}

enum AppointmentStatus {
  scheduled
  completed
  canceled
}

enum PaymentMethod {
  cash
  card
  insurance
}

enum PaymentStatus {
  paid
  pending
  canceled
}
